#include "./aids.hpp"

using namespace aids;

#include "./something_parsers.hpp"

void usage(FILE *stream)
{
    println(stream, "Usage: ./assets_typer <assets.conf>");
}

int main(int argc, char *argv[])
{
    Args args = {argc, argv};
    args.shift();               // skip the program name

    if (args.empty()) {
        usage(stderr);
        println(stderr, "ERROR: path to assets.conf is not provided");
        exit(1);
    }
    auto assets_filepath = args.shift();

    auto assets_content = unwrap_or_panic(
        read_file_as_string_view(assets_filepath),
        "Could not read file `", assets_filepath, "`");

    int textures_count = 0;
    int sounds_count = 0;
    int animats_count = 0;

    println(stdout, "// Generated by ", __FILE__, " from ", assets_filepath);
    parse_assets_conf(assets_content, [&](auto line_number, auto type, auto id, auto) {
        if (type == "textures"_sv) {
            println(stdout, "#define ", id, "_INDEX (Texture_Index {", textures_count, "})");
            println(stdout, "#define ", id, " assets.textures[", textures_count, "].unwrap");
            textures_count++;
        } else if (type == "sounds"_sv) {
            println(stdout, "#define ", id, "_INDEX (Sample_S16_Index {", sounds_count, "})");
            println(stdout, "#define ", id, " assets.sounds[", sounds_count, "].unwrap");
            sounds_count++;
        } else if (type == "animats"_sv) {
            println(stdout, "#define ", id, "_INDEX (Frame_Animat_Index {", animats_count, "})");
            println(stdout, "#define ", id, " assets.animats[", animats_count, "].unwrap");
            animats_count++;
        } else {
            println(stderr, assets_filepath, ":", line_number, ": ",
                    "Unknown type of asset `", type, "`");
            exit(1);
        }
    });

    return 0;
}
